name: JavaFX CI/CD Pipeline (Debug Mode)

on:
  push:
    branches: [ "master-beta" ]
  pull_request:
    branches: [ "master-beta" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout with full history
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get complete git history for debugging

      # 2. Debug: Show branch and file structure
      - name: Debug - Show environment and source code
        run: |
          echo "=== BUILDING BRANCH ==="
          git branch -a
          
          echo "=== APP.JAVA CONTENT ==="
          cat src/main/java/com/example/bugs/App.java || echo "App.java not found!"
          
          echo "=== PACKAGE DECLARATION IN APP.JAVA ==="
          grep -n "package" src/main/java/com/example/bugs/App.java || echo "No package declaration found!"
          
          echo "=== MAIN METHOD IN APP.JAVA ==="
          grep -n "public static void main" src/main/java/com/example/bugs/App.java || echo "No main method found!"

      # 3. JavaFX setup with verification
      - name: Setup JavaFX environment
        run: |
          sudo apt-get install -y xvfb libgtk-3-0 libxtst6 libxrender1
          wget https://download2.gluonhq.com/openjfx/21/openjfx-21_linux-x64_bin-sdk.zip
          unzip openjfx-21_linux-x64_bin-sdk.zip
          echo "JAVAFX_HOME=$(pwd)/javafx-sdk-21" >> $GITHUB_ENV
          Xvfb :99 -screen 0 1024x768x24 &
          export DISPLAY=:99
          echo "=== JAVAFX VERIFICATION ==="
          ls -la $JAVAFX_HOME/lib/

      # 4. JDK setup
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      # 5. Build with detailed debugging
      - name: Check directory structure before build
        run: |
          echo "=== CURRENT DIRECTORY ==="
          pwd
          echo "=== POM.XML CONTENT ==="
          cat pom.xml || echo "pom.xml not found in current directory!"

      - name: Build with Maven
        run: |
          echo "=== MAVEN BUILD WITH DETAILED DEBUG ==="
          mvn -version
          
          echo "=== RUNNING MAVEN COMPILE ONLY FIRST ==="
          mvn -B compile
          
          echo "=== CHECKING COMPILED CLASSES ==="
          find target/classes -name "*.class" | sort
          
          echo "=== CHECKING FOR APP.CLASS ==="
          find target/classes -name "App.class"
          
          echo "=== NOW RUNNING FULL PACKAGE ==="
          mvn -B package -Dmaven.compiler.source=21 -Dmaven.compiler.target=21
          
          if [ -f "target/address-book-1.0-SNAPSHOT.jar" ]; then
            echo "=== JAR CREATED SUCCESSFULLY ==="
            echo "=== JAR CONTENTS ==="
            jar tf target/address-book-1.0-SNAPSHOT.jar > jar-contents.txt
            cat jar-contents.txt
            
            echo "=== CHECKING FOR APP.CLASS IN JAR ==="
            jar tf target/address-book-1.0-SNAPSHOT.jar | grep -i "app.class"
            
            echo "=== CHECKING FOR COM/EXAMPLE/BUGS PATH IN JAR ==="
            jar tf target/address-book-1.0-SNAPSHOT.jar | grep -i "com/example/bugs"
            
            echo "=== MANIFEST CONTENT ==="
            unzip -p target/address-book-1.0-SNAPSHOT.jar META-INF/MANIFEST.MF
          else
            echo "JAR not created at expected location"
          fi
          
          echo "=== MAVEN DEBUG OUTPUT ==="
          mvn -X -B clean package -Dmaven.compiler.source=21 -Dmaven.compiler.target=21

      # 6. Modify the manifest manually if needed
      - name: Fix JAR manifest if needed
        run: |
          if [ -f "target/address-book-1.0-SNAPSHOT.jar" ]; then
            # Extract current manifest
            mkdir -p META-INF
            unzip -p target/address-book-1.0-SNAPSHOT.jar META-INF/MANIFEST.MF > META-INF/MANIFEST.MF
            
            # Check if Main-Class is properly set
            if ! grep -q "Main-Class:" META-INF/MANIFEST.MF; then
              echo "=== ADDING MAIN-CLASS TO MANIFEST ==="
              # Create a new manifest with Main-Class
              echo "Manifest-Version: 1.0" > META-INF/MANIFEST.MF.new
              echo "Main-Class: com.example.bugs.App" >> META-INF/MANIFEST.MF.new
              cat META-INF/MANIFEST.MF >> META-INF/MANIFEST.MF.new
              mv META-INF/MANIFEST.MF.new META-INF/MANIFEST.MF
              
              # Update the JAR with the new manifest
              echo "=== UPDATING JAR WITH NEW MANIFEST ==="
              jar umf META-INF/MANIFEST.MF target/address-book-1.0-SNAPSHOT.jar
              
              # Verify the update
              echo "=== UPDATED MANIFEST ==="
              unzip -p target/address-book-1.0-SNAPSHOT.jar META-INF/MANIFEST.MF
            else
              echo "=== MANIFEST ALREADY HAS MAIN-CLASS ==="
              cat META-INF/MANIFEST.MF
            fi
          else
            echo "JAR not found, skipping manifest fix"
          fi

      # 7. Enhanced JAR testing with fixed manifest
      - name: Test JAR execution
        run: |
          if [ -f "target/address-book-1.0-SNAPSHOT.jar" ]; then
            echo "=== ATTEMPT 1: Standard Execution ==="
            java -jar target/address-book-1.0-SNAPSHOT.jar --headless || \
            ( echo "=== ATTEMPT 1 FAILED ===" 
              echo "=== ATTEMPT 2: Explicit Classpath with App class ==="
              java -cp target/address-book-1.0-SNAPSHOT.jar com.example.bugs.App --headless || \
              ( echo "=== ATTEMPT 2 FAILED ==="
                echo "=== ATTEMPT 3: With JavaFX Modules ==="
                java \
                  --module-path $JAVAFX_HOME/lib \
                  --add-modules javafx.controls,javafx.fxml \
                  -jar target/address-book-1.0-SNAPSHOT.jar --headless || \
                ( echo "=== ATTEMPT 3 FAILED ==="
                  echo "=== FINAL ATTEMPT: Direct Class with Modules ==="
                  java \
                    --module-path $JAVAFX_HOME/lib \
                    --add-modules javafx.controls,javafx.fxml \
                    -cp target/address-book-1.0-SNAPSHOT.jar \
                    com.example.bugs.App --headless 
                )
              )
            )
          else
            echo "JAR file not found at target/address-book-1.0-SNAPSHOT.jar. Build may have failed."
            exit 1
          fi

      # 8. Try fixing the App class if it wasn't found in JAR
      - name: Try creating a simple App class if it's missing
        if: failure()
        run: |
          echo "=== ATTEMPTING TO CREATE A SIMPLE APP CLASS ==="
          # Create a simple App class
          mkdir -p src/main/java/com/example/bugs
          cat > src/main/java/com/example/bugs/App.java << 'EOL'
          package com.example.bugs;
          
          public class App {
              public static void main(String[] args) {
                  System.out.println("Hello from App!");
                  
                  boolean headless = false;
                  for (String arg : args) {
                      if (arg.equals("--headless")) {
                          headless = true;
                          break;
                      }
                  }
                  
                  System.out.println("Running in " + (headless ? "headless" : "normal") + " mode");
                  
                  // Exit immediately in headless mode
                  if (headless) {
                      System.out.println("Exiting headless mode");
                      System.exit(0);
                  }
              }
          }
          EOL
          
          echo "=== REBUILDING WITH SIMPLE APP CLASS ==="
          mvn -B clean package -Dmaven.compiler.source=21 -Dmaven.compiler.target=21
          
          echo "=== TESTING SIMPLE APP CLASS ==="
          if [ -f "target/address-book-1.0-SNAPSHOT.jar" ]; then
            java -cp target/address-book-1.0-SNAPSHOT.jar com.example.bugs.App --headless
          else
            echo "JAR still not created after fixing App class"
          fi

      # 9. Dependency graph
      - name: Update dependency graph
        if: success()
        uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6

      # 10. Archive build artifacts for inspection
      - name: Archive build results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-artifacts
          path: |
            target/
            **/*.jar
            **/App.java
            META-INF/
            jar-contents.txt
            classes.txt
            **/pom.xml
